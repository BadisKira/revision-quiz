"use client";

import React, { useState, useEffect } from "react";

import { Button } from "@/components/ui/button";
import { useSpeechToText } from "@/hooks/useSpeechRecognition";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { AudioLines, Brain, Tag } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { TimerToStart } from "@/components/voice/timerToStart";
import { RecordingTimer } from "@/components/voice/recordingTimer";
import { correctAnswerAction, generateQuestionAction } from "@/app/actions/quiz/manageQuizVoice";
import { IACorrection, VoicedQuestion } from "@/type/voice";

const SpeechToTextComponent: React.FC = () => {
  const [loading, setLoading] = useState(true);
  const [questionToAnswer, setQuestionToAnswer] = useState<VoicedQuestion>();
  const {
    isRecording,
    transcript,
    startRecognition,
    stopRecognition,
    variation,
  } = useSpeechToText();
  const [speechStarted, setSpeechStarted] = useState(false);
  const [showTimer, setShowTimer] = useState(true);

  const handleCountdownComplete = () => {
    setShowTimer(false);
    setSpeechStarted(true);
    startRecognition();
  };

  const handleTimerComplete = () => {
    stopRecognition();
  };


  useEffect(() => {
    async function generateQuestionClient() {
      setLoading(true);
      const data = await generateQuestionAction();
      setQuestionToAnswer(data);
      setLoading(false);
    }
    generateQuestionClient();
  }, []);
  

  if (loading) {
    return <div className="font-semibold w-full flex justify-center items-center h-[50dvh]">
      Création des questions ...
    </div>
  }

  return (
    <Card className="flex flex-col items-center space-y-4 p-4">
      <CardHeader className="w-10/12 mx-auto space-y-10">
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center gap-2">
            <Brain className="w-6 h-6 text-primary" />
            <CardTitle>
              theme - generated by { }
              {"IA"}
            </CardTitle>
          </div>
          <div className="flex items-center gap-2">
            <Tag className="w-4 h-4 text-muted-foreground" />
            <div className="flex gap-1">
              {["bankai", "Akatsuki"].map((tag) => (
                <Badge key={tag} variant="secondary">
                  {tag}
                </Badge>
              ))}
            </div>
          </div>
        </div>
        <div className="w-full my-1 text-sm py-2 text-muted-foreground">
          {questionToAnswer?.content}
        </div>
        <Progress value={20} className="h-2" />
        <CardDescription className="mt-2">
          Question {2} sur {10}
        </CardDescription>
      </CardHeader>
      <CardContent className="mx-auto w-10/12">
        {!speechStarted && showTimer && questionToAnswer && (
          <TimerToStart onCountdownComplete={handleCountdownComplete} duration={Math.floor(questionToAnswer.content.length / 25)} />
        )}
        {speechStarted && isRecording && (
          <div className="flex flex-col items-center space-y-4">
            <RecordingTimer
              duration={60}
              onTimerComplete={handleTimerComplete}
            />
            {/* <Button onClick={stopRecognition}>Arrêter la reconnaissance</Button> */}
            <div className=" flex justify-center items-center rounded-full bg-slate-700">
              <Button
                onClick={stopRecognition}
                className="w-28 h-28 flex justify-center  border-red-100 items-center rounded-full bg-slate-900"
                style={{
                  borderWidth: variation,
                }}
              >
                <AudioLines />
              </Button>
            </div>
            <p>click to stop</p>
          </div>
        )}

        {!isRecording && speechStarted && transcript && (

          <div className="mt-4 w-full">
            <CorrectionComponent answerContent={transcript} questionContent={questionToAnswer?.content ?? ""} />
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default SpeechToTextComponent;


function CorrectionComponent({ answerContent, questionContent }: { answerContent: string, questionContent: string }) {
  const [loading, setLoading] = useState(true);
  const [iaCorrection, setIaCorrection] = useState<IACorrection>();
  useEffect(() => {
    async function generateCorrection() {
      setLoading(true);

      const data = await correctAnswerAction({
        answer: {
          content: answerContent,
          question: {
            content: questionContent
          }
        }
      });
      if ("error" in data) {
        console.log("ERROR");
        return;
      }
      setIaCorrection(data);
      setLoading(false);
    }
    if (answerContent !== "") {
      generateCorrection();
    }
  }, [answerContent,questionContent]);

  if (loading) {
    return <div>
      Générating correction .....
    </div>
  }
  return (
    <Card className="w-full shadow-lg">
      <CardHeader>
        <CardTitle className="text-xl font-bold">Résultat de la correction</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="mb-4">
          <h2 className="text-md font-semibold">Résumé de la réponse</h2>
          <p className=" text-sm text-gray-700">{iaCorrection?.resumeAnswer}</p>
        </div>
        <div className="mb-4">
          <h2 className="text-md font-semibold">Verdict</h2>
          <p className=" text-sm text-gray-700">{iaCorrection?.verdict}</p>
        </div>
        <div>
          <h2 className="text-md font-semibold">Correction</h2>
          <p className="text-sm text-gray-700">{iaCorrection?.correction}</p>
        </div>
      </CardContent>
    </Card>
  )
}